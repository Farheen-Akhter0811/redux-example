{"version":3,"sources":["logo.svg","actions/postsAction.js","components/Posts.js","components/PostForm.js","components/map.js","actions/types.js","reducers/postsReducer.js","reducers/index.js","store.js","components/local.js","components/HomeButton.js","App.js","reportWebVitals.js","index.js"],"names":["fetchPost","dispatch","fetch","then","res","json","posts","type","payload","Posts","this","props","nextProps","console","log","newPost","unshift","postItems","map","post","title","body","id","Component","connect","state","items","item","PostForm","onchange","bind","onsubmit","e","setState","target","name","value","preventDefault","createPost","onSubmit","onChange","method","headers","JSON","stringify","response","Map","useParams","pathname","useLocation","match","useRouteMatch","path","strict","sensitive","FETCH_POSTS","NEW_POST","initialState","combineReducers","action","push","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","Local","localStorageKey","useState","localStorage","getItem","setValue","useEffect","setItem","useStateWithLocalStorage","event","HomeButton","history","useHistory","onClick","location","length","App","className","src","logo","alt","href","rel","to","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08baaf5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const FETCH_POSTS = \"FETCH_POSTS\"\r\nexport const NEW_POST = \"NEW_POST\"\r\n\r\nexport const fetchPost = () => (dispatch) => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n    .then((res) => res.json())\r\n    .then((posts) =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: posts,\r\n      })\r\n    )\r\n}\r\nexport const createPost = (post) => (dispatch) => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json; charset=UTF-8\",\r\n    },\r\n    body: JSON.stringify(post),\r\n  })\r\n    .then((response) => response.json())\r\n    .then((post) =>\r\n      dispatch({\r\n        type: NEW_POST,\r\n        payload: post,\r\n      })\r\n    )\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { fetchPost } from \"../actions/postsAction\"\r\nimport { createPost } from \"../actions/postsAction\"\r\nimport { withRouter } from \"react-router-dom\"\r\n\r\nimport { useHistory } from \"react-router-dom\"\r\n// import PropTypes from \"prop-types\"\r\n\r\nexport class Posts extends Component {\r\n  // constructor(props) {\r\n  //   super()\r\n  //   this.state = {\r\n  //     posts: [],\r\n  //   }\r\n  // }\r\n  //  same as cdm where render and cdm works parallely to show content on screen componentWillMount()\r\n  componentDidMount() {\r\n    // fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n    //   .then((res) => res.json())\r\n    //   .then((data) => this.setState({ posts: data }))\r\n    // debugger\r\n    this.props.fetchPost()\r\n    // this.props.createPost()\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    console.log(nextProps, \"next props\")\r\n\r\n    if (nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost)\r\n    }\r\n  }\r\n  // routeChange = () => {\r\n  //   let path = \"/about\"\r\n  //   this.props.history.push(path)\r\n  // }\r\n  render() {\r\n    // const posts = this.state.posts\r\n    // console.log(posts)\r\n    console.log(this.props.newPost)\r\n    const postItems =\r\n      this.props.posts &&\r\n      this.props.posts.map((post) => {\r\n        return (\r\n          <>\r\n            <div key={post.id}>\r\n              <h2>{post.title}</h2>\r\n              <p>{post.body}</p>\r\n            </div>\r\n            {/* <button type=\"button\" onClick={this.routeChange}>\r\n              Go back\r\n            </button> */}\r\n          </>\r\n        )\r\n      })\r\n\r\n    return (\r\n      <>\r\n        <h1>Posts</h1>\r\n        {postItems}\r\n      </>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item,\r\n})\r\nexport default connect(mapStateToProps, { fetchPost })(Posts)\r\n","import React, { Component } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { createPost, fetchPost } from \"../actions/postsAction\"\r\nimport { Link } from \"react-router-dom\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Posts } from \"./Posts\"\r\n\r\nexport class PostForm extends Component {\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      post: {\r\n        title: \"\",\r\n        body: \"\",\r\n      },\r\n    }\r\n    // PostForm.PropTypes = {\r\n    //   createPost: PropTypes.func.isRequired,\r\n    // }\r\n    this.onchange = this.onchange.bind(this)\r\n    this.onsubmit = this.onsubmit.bind(this)\r\n  }\r\n  onchange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n  onsubmit(e) {\r\n    e.preventDefault()\r\n    const post = {\r\n      title: this.state.title,\r\n      body: this.state.body,\r\n    }\r\n    // fetch(\"https://jsonplaceholder.typicode.com/posts\", {\r\n    //   method: \"POST\",\r\n    //   headers: {\r\n    //     \"content-type\": \"application/json; charset=UTF-8\",\r\n    //   },\r\n    //   body: JSON.stringify(post),\r\n    // })\r\n    //   .then((response) => response.json())\r\n    //   .then((data) => console.log(data))\r\n    console.log(post)\r\n\r\n    this.props.createPost(post)\r\n    // this.props.fetchPost()\r\n  }\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onsubmit}>\r\n        <div>\r\n          <h1>Post-Form</h1>\r\n          <label>Post</label>\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={this.state.title}\r\n            onChange={this.onchange}\r\n          ></input>\r\n        </div>\r\n        <div>\r\n          <label>Content</label>\r\n          <br />\r\n          <textarea\r\n            name=\"body\"\r\n            value={this.state.body}\r\n            onChange={this.onchange}\r\n          ></textarea>\r\n        </div>\r\n        {/* <Link to=\"/dashboard\" component={Posts}> */}\r\n        {/* <Link to=\"/dashboard\"> */}{\" \"}\r\n        <button onSubmit={this.onsubmit}>Submit</button>\r\n        {/* </Link> */}\r\n        {/* </Link> */}\r\n        <br />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  post: state.posts.item,\r\n})\r\n\r\nexport default connect(mapStateToProps, { createPost, fetchPost })(PostForm)\r\n","import React from \"react\"\r\nimport { useParams, useLocation, useRouteMatch } from \"react-router-dom\"\r\nimport Posts from \"./Posts\"\r\nimport PostForm from \"./PostForm\"\r\n\r\nconst Map = () => {\r\n  const { name } = useParams()\r\n  const { pathname } = useLocation()\r\n  const match = useRouteMatch({\r\n    path: `/dashboard/${name}`,\r\n    strict: true,\r\n    sensitive: true,\r\n  })\r\n  return (\r\n    <div>\r\n      {name == \"feenu\" && match ? (\r\n        <div>\r\n          <h2>The paramter from url is {name} using useParams() Hook</h2>\r\n          <h2>\r\n            The current URL is {pathname} from location object using\r\n            useLocation()\r\n          </h2>\r\n          <PostForm />\r\n          <Posts />\r\n        </div>\r\n      ) : (\r\n        \"parameter not correct and doesnot match the url given\"\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Map\r\n","export const FETCH_POSTS = \"FETCH_POSTS\"\r\nexport const NEW_POST = \"NEW_POST\"\r\n","import { FETCH_POSTS } from \"../actions/types\"\r\nimport { NEW_POST } from \"../actions/types\"\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {},\r\n}\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n      }\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        item: action.payload,\r\n        ...state.items.push(state.item),\r\n      }\r\n    default:\r\n      console.log(state)\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport postsReducer from \"./postsReducer\"\r\nexport default combineReducers({\r\n  posts: postsReducer,\r\n})\r\n","import { applyMiddleware, compose, createStore } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport rootReducer from \"./reducers\"\r\n\r\nconst middleware = [thunk]\r\nconst initialState = {}\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n)\r\n\r\nexport default store\r\n","import React from \"react\"\r\nimport { useState, useEffect } from \"react\"\r\n\r\nconst useStateWithLocalStorage = (localStorageKey) => {\r\n  const [value, setValue] = useState(\r\n    localStorage.getItem(localStorageKey) || \"\"\r\n  )\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, value)\r\n  }, [value])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nconst Local = () => {\r\n  const [value, setValue] = useStateWithLocalStorage(\"myValueInLocalStorage\")\r\n\r\n  function storeInLocalstorage(event) {\r\n    // localStorage.setItem(\"InputValue\", event.target.value)\r\n    setValue(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" value={value} onChange={storeInLocalstorage}></input>\r\n      {value}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Local\r\n","import { useHistory } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport Map from \"./map\"\r\nimport Local from \"./local\"\r\n\r\nconst HomeButton = () => {\r\n  let history = useHistory()\r\n  console.log(history, \"history\")\r\n  function handleClick() {\r\n    const pathname = history.location.pathname\r\n    const length = history.length\r\n    console.log(pathname, length)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={handleClick}>\r\n        Go home\r\n      </button>\r\n      <Map />\r\n      <Local />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomeButton\r\n","import logo from \"./logo.svg\"\nimport \"./App.css\"\n\nimport Map from \"./components/map\"\nimport { Provider } from \"react-redux\"\nimport store from \"./store\"\nimport HomeButton from \"./components/HomeButton\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\nfunction App() {\n  const name = \"feenu\"\n  return (\n    <Router>\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </a>\n          </header>\n          <ul>\n            <li>\n              <Link to=\"/home\">Home</Link>\n            </li>\n            {/* <li>\n              <Link to=\"/about\">About</Link>\n            </li> */}\n            <li>\n              <Link to={`/dashboard/${name}`}>Dashboard</Link>\n            </li>\n          </ul>\n          <Switch>\n            <Route exact path=\"/home\">\n              <HomeButton />\n            </Route>\n            {/* <Route path=\"/about\">\n              <PostForm />\n            </Route> */}\n            <Route path=\"/dashboard/:name\">\n              <Map />\n            </Route>\n          </Switch>\n        </div>\n      </Provider>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}